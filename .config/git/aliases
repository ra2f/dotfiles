# vim: set filetype=gitconfig :

[alias]
  #
  # Config
  #

  # List configuration
  cf = config --list
  # List aliases.
  aliases = config --get-regexp alias

  #
  # Remotes
  #

  # Add the upstream branch
  add-upstream = !git remote add upstream $@
  # Set the upstream branch
  set-upstream = !git remote set-url upstream $@

  #
  # Branching
  #

  # Shortcut for `git branch`
  br = branch
  # Delete a branch
  brd = branch -d
  # Show local branches with details
  brls = branch -vv
  # Shortcut for `git checkout`
  co = checkout
  # Shortcut for `git checkout -b`
  cob = checkout -b
  # Checkout default branch
  cod = !git checkout $(git default-branch)
  # Alias for `git sd`
  cm = sd
  # Switch to the default branch
  sd = !git switch $(git default-branch)
  # Switch branches
  sw = switch
  # Switch and create branch
  swc = switch -c
  # Git worktree
  wt = worktree
  # Backup the current branch
  backup-branch = !git branch "backup/$(git branch-name)"
  # Show the current branch name
  branch-name = !git rev-parse --abbrev-ref $(HEAD)
  # Get default branch for repo
  default-branch = !git symbolic-ref --short refs/remotes/origin/HEAD | sed "s@^origin/@@"
  # set the default branch
  set-default-branch = "!f() { git remote set-head origin ${1:-$(git default-branch)}; }; f"
  # List branches
  ls-branches = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf("  \\033[33m%s: \\033[36m %s\\033[0m\\n", substr($2, 1, length($2)-1), $1)}'
  # Show remote merged
  ls-merged-branches = !git branch -r --merged | grep -v $(git default-branch)
  # Delete all merged branches but default
  kill-branches = !git branch --merged | grep -v '\\b$(git default-branch)\\b' | xargs git branch -d
  # Create a new feature branch `git new-feat [ticketNum] [branchName]`
  new-feat = "!f() { args=($@); ticketNum=${args[0]}; suffix=${args[@]:1}; branchName=$([[ -n $suffix ]] && echo $ticketNum-$suffix || echo $ticketNum); git checkout -b \"${branchName}\"; }; f"

  #
  # Fetch, Pull & Push
  #

  # Fetch and prune all branches that do not exist in remote
  fetchp = fetch -p
  # Pull submodules and all recursively
  pull = !git pull && git submodule update --init --recursive && git submodule update --recursive
  # Push force no-verify
  pf = push --force-with-lease --no-verify
  # Push upstream
  pushu = !git push -u origin $(git branch-name)
  # Pull & push the current branch
  sync = !git pull && git push
  # Update a fork with the default branch
  sync-fork = "!f() { branchName=${1:-$(git default-branch)}; git fetch upstream && git checkout $branchName && git merge upstream/$branchName; }; f"
  # Clone a repository including all submodules.
	c = clone --recursive
  # Push changes
	p = push
	# push new branch - push a branch to origin and set upstream
  pnb = "!git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
  # Initialize all submodules
	smu = submodule update --init --recursive

  #
  # Staging & Commits
  #

  # Show current branch status with short format
  s = status -sb
  # Show current branch status with untracked files
  stu = status --untracked-files
  # Add file
	a = add
	# Add all modified files
	aa = add --all
  # Commit all changes with message.
  ca = "!f() { git add -A && git commit -av -m \"$@\"; }; f"
	# Commit with message.
  co = "!f() { git commit -m \"$@\"; }; f"
	# Commit with message bypass pre-commit.
  conv = "!f() { git commit -m \"$@\" --no-verify; }; f"
  # Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD
	# Amend in last commit and push
	fixup = !git amend && git push -q --force-with-lease
  # Commit fixup (git commit --fixup :/second)
  cif = !git commit --fixup
  # Commit ammend with no edit
  cim = !git commit -m
  # Reset and clean the repo dir
  clean-pristine = !git reset --hard && git clean -fdX
  # Reset to origin/[default-branch] (e.g. main)
  reset-to-default = !git fetch origin && git reset --hard origin/$(git default-branch)
  # Reset to origin/[current-branch]
  reset-to-origin = !git fetch --all && git reset --hard origin/$(git branch-name)
  # Put last commit in staged changes
	oops = "!git reset --soft HEAD^"
  # Unstage all files
  unstage = reset HEAD
	# Cherry-pick commit.
	cp = cherry-pick

  #
  # Merging, Patching & Rebase
  #

  # Do not auto commit in order to inspect the result
  nomerge = --no-commit --no-ff "$@"
  # Rebase
  rb = rebase
  # Shortcut for `git rebase --continue`
  rbc = rebase --continue
	# Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$@; }; r"
  # Rebase default branch (main, develop, etc)
  rbd = "!f() { branchName=$(git default-branch); git rebase -i $branchName; }; f"
  # Alias for rbd
  rbm = rbd
  # squash up to
  squash = "!f() { git rebase -i HEAD~${@:-2}; }; f"
  # Squash up to default branch (main, develop, etc)
  squashbase = "!f() { branchName=${1:-$(git default-branch)}; commitCount=$(git count $branchName); git rebase -i HEAD~$commitCount; }; f"
  # Display a log of incoming changes
  in = !git ll HEAD..HEAD@{u}
  # Display a log of outgoing changes
  out = !git ll HEAD@{u}..HEAD
  # Stage our files during a merge
  ours = "!f() { git checkout --ours -- \"$@\" && git add -- \"$@\"; }; f"
  # Stage the incoming changes
  theirs = "!f() { git checkout --theirs -- \"${@}\" && git add -- \"${@}\"; }; f"
  # Cherry pick commits
  cp = cherry-pick
  # Cherry pick with sign off line
  cps = cherry-pick -s

  #
  # Diff, Log & Introspection
  #

  # Display the number of commits between branches
  count = "!f() { compareBranch=${1-$(git default-branch)}; git rev-list --count HEAD ^$compareBranch; }; f"
  # Shows the files changed between
  df = diff --stat
  # Show changes that have been staged
  dfs = diff --cached
  # Use fuzzy finder for diff
  dfz = !git-fuzzy-diff
  # A more concise and readable git log (one line per commit)
  ls = log --oneline --decorate --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
  # Display a pretty change log (fancy git log --stat --pretty=short)
  ll = log --stat --pretty=format:"%C(auto,yellow)%h%C(auto)%d%C(auto,reset)\\ by\\ %C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)%n\\ %s%n"
  # List differences from yesterday
  today = diff @{yesterday}.. --stat
  # Print the last commit title & hash
  last = !git --no-pager log -1 --oneline --color
  # Display the last tag info
  lasttag = describe --tags --abbrev=0
  # List authors
  authors = shortlog -sn
